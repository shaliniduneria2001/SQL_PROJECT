CREATE DATABASE CompanyDB;
USE CompanyDB;

SHOW DATABASES;


CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(50),
    Position VARCHAR(50),
    Salary DECIMAL(10,2),
    JoiningDate DATE
);

INSERT INTO Employees (EmployeeID, Name, Position, Salary, JoiningDate) VALUES
(1, 'Amit Sharma', 'Manager', 75000, '2018-06-15'),
(2, 'Priya Verma', 'Sales Executive', 45000, '2019-09-01'),
(3, 'Rohit Mehta', 'HR', 50000, '2020-02-20'),
(4, 'Neha Singh', 'Accountant', 55000, '2021-05-10');



CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(50),
    Email VARCHAR(50),
    City VARCHAR(50),
    JoinDate DATE
);

INSERT INTO Customers (CustomerID, Name, Email, City, JoinDate) VALUES
(1, 'Rahul Kumar', 'rahul@example.com', 'Delhi', '2021-01-10'),
(2, 'Sneha Roy', 'sneha@example.com', 'Mumbai', '2021-03-15'),
(3, 'Vikas Gupta', 'vikas@example.com', 'Bangalore', '2022-06-20'),
(4, 'Anjali Yadav', 'anjali@example.com', 'Chennai', '2022-09-05');



CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Category VARCHAR(50),
    Price DECIMAL(10,2),
    Stock INT
);

INSERT INTO Products (ProductID, ProductName, Category, Price, Stock) VALUES
(1, 'Laptop', 'Electronics', 55000, 10),
(2, 'Smartphone', 'Electronics', 20000, 25),
(3, 'Table', 'Furniture', 8000, 15),
(4, 'Chair', 'Furniture', 4000, 30);



CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    ProductID INT,
    Quantity INT,
    OrderDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

INSERT INTO Orders (OrderID, CustomerID, ProductID, Quantity, OrderDate) VALUES
(1, 1, 2, 1, '2023-01-15'),
(2, 2, 1, 2, '2023-02-20'),
(3, 3, 4, 4, '2023-03-25'),
(4, 4, 3, 1, '2023-04-10');

SELECT * FROM Customers;
SELECT * FROM Employees;
SELECT * FROM Orders;
SELECT * FROM Products;

-- ðŸ”¹ Basic Level Questions
-- 1:- Retrieve all employee details.
SELECT * FROM Employees;

-- 2:-Display customer names and emails.
SELECT Name,Email FROM Customers;

-- 3:-List all products in the "Electronics" category.
SELECT * FROM Products
WHERE Category = "Electronics";

-- 4:-Show employees with a salary greater than 50,000.
SELECT * FROM Employees
WHERE Salary > 50000;

-- 5:-Retrieve all orders placed by customers.
SELECT * FROM Orders;



-- ðŸ”¹ Intermediate Level Questions
-- 1:-Count how many customers are from "Mumbai".
SELECT COUNT(CustomerID) FROM Customers
WHERE City = "Mumbai";

-- 2:-Find the most expensive product.
-- SELECT  max(price) as most_expensive_product FROM Products;
SELECT * FROM Products
ORDER BY Price desc
limit 1;
-- 3:-Identify the order with the highest quantity.
SELECT * FROM Orders
ORDER BY Quantity desc
LIMIT 1;

-- 4:-Find the cheapest product in each category.
SELECT Category, min(price)
FROM PRODUCTS
GROUP BY Category;

-- 5:-List all customers who placed orders in 2023.
SELECT * FROM Orders
WHERE OrderDate BETWEEN "2023-01-01" AND "2023-01-31";


-- ðŸ”¹ Advanced Level Questions
-- 1:-Calculate the average salary for each employee position.
-- SELECT AVG(SALARY) FROM CUSTOMER


SELECT position, avg(salary) FROM Employees
group by position;
-- 2:-Find the total number of orders placed by each customer.
SELECT Customers.Name, COUNT(Orders.OrderID) AS Total_Orders
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.Name;

-- 3:-Identify the customer with the highest number of orders.
SELECT Customers.Name, COUNT(Orders.OrderID) AS Total_Orders
FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.Name
ORDER BY Total_Orders DESC
LIMIT 1;

-- 4:-Calculate the total revenue generated by each product.
SELECT Products.ProductName, SUM(Orders.Quantity * Products.Price) AS Total_Revenue
FROM Orders
JOIN Products ON Orders.ProductID = Products.ProductID
GROUP BY Products.ProductName;

-- 5:-List all customers who have never placed an order.
SELECT Name FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);
