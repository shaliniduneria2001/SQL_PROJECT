USE KAGGLE;

SELECT * FROM BOOKS1;
SELECT * FROM CUSTOMER1;
SELECT * FROM ORDERS1;

-- 1.List all books with their title and price.
SELECT Title,Price FROM BOOKS1;


-- 2.Find books that are priced above ₹500.
SELECT * FROM BOOKS1
WHERE PRICE > 500;


-- 3.Get the list of all customers from ‘India’.
SELECT * FROM CUSTOMER1
WHERE COUNTRY = 'INDIA';


-- 4.Show the number of books available in each genre.
SELECT GENRE, COUNT(*) FROM BOOKS1
GROUP BY GENRE;


-- 5.Which customers placed more than 5 orders (based on quantity)?
SELECT CUSTOMER_ID, 
       SUM(QUANTITY) AS TOTAL_ORDERED
FROM ORDERS1
GROUP BY CUSTOMER_ID
HAVING TOTAL_ORDERED > 5;

-- 6.List all distinct countries where customers live.
SELECT DISTINCT COUNTRY FROM CUSTOMER1;


-- 7.Show books that are out of stock (Stock = 0).
SELECT * FROM BOOKS1
WHERE STOCK = 0;


-- 8.Find the most expensive book.
SELECT * FROM Books1
WHERE Price = (SELECT MAX(Price) FROM Books1);


-- 9.Display customers whose name starts with ‘S’.
SELECT * FROM CUSTOMER1
WHERE NAME LIKE 'S%';


-- 10.Find total revenue (sum of Total_Amount) from all orders.
SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE FROM ORDERS1;

-- 11.Join books and orders to show which book was ordered how many times.
SELECT B.TITLE,
COUNT(O.ORDER_ID) AS ORDER_COUNT 
FROM BOOKS1 AS B
JOIN ORDERS1 AS O
ON B.BOOK_ID = O.BOOK_ID
GROUP BY B.TITLE;


-- 12.Find the top 5 most sold books (by quantity).
SELECT B.TITLE,
SUM(O.QUANTITY) AS TOTAL_QUANTITY 
FROM BOOKS1 AS B
JOIN ORDERS1 AS O
ON B.BOOK_ID = O.BOOK_ID
GROUP BY B.TITLE
ORDER BY TOTAL_QUANTITY DESC
LIMIT 5;


-- 13.Show total revenue generated by each book.
SELECT B.TITLE, 
SUM(O.TOTAL_AMOUNT) AS TOTAL_REVENUE 
FROM BOOKS1 AS B
JOIN ORDERS1 AS O
ON B.BOOK_ID = O.BOOK_ID
GROUP BY B.TITLE;

-- 14.List customers along with the names of books they purchased.
SELECT B.TITLE,C.NAME FROM BOOKS1 AS B
JOIN ORDERS1 AS O
ON B.BOOK_ID = O.BOOK_ID
JOIN CUSTOMER1 AS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID;


-- 15.Which customer spent the most money overall?
SELECT C.NAME,SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT FROM CUSTOMER1 AS C
JOIN ORDERS1 AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.NAME
ORDER BY TOTAL_SPENT DESC
LIMIT 1;


-- 16.Find the month-wise total revenue.
SELECT 
  DATE_FORMAT(ORDER_DATE, '%Y-%m') AS Order_Month,
  SUM(TOTAL_AMOUNT) AS Month_Wise_Total_Revenue
FROM ORDERS1
WHERE ORDER_DATE IS NOT NULL
GROUP BY Order_Month
ORDER BY Order_Month;


-- 17.List top 3 authors based on total sales.
SELECT B.AUTHOR, 
SUM(O.QUANTITY * B.PRICE) as total_sales
FROM BOOKS1 AS B
join orders1 as o
ON B.BOOK_ID = O.BOOK_ID
group by B.AUTHOR
order by total_sales desc
LIMIT 3;


-- 18.Show total number of orders for each country.
select country, count(*) from orders1 as o
join customer1 as c
on c.customer_id = o.customer_id
group by country;



-- 19.Find customers who have not placed any order.
SELECT * 
FROM CUSTOMER1 
WHERE CUSTOMER_ID NOT IN (
  SELECT DISTINCT CUSTOMER_ID 
  FROM ORDERS1
);


-- 20.Which book has the lowest stock but high total sales (joined with orders)?
SELECT B.TITLE,B.STOCK,
SUM(O.QUANTITY) AS TOTAL_SOLD
FROM BOOKS1 AS B
JOIN ORDERS1 AS O
ON B.BOOK_ID = O.BOOK_ID
GROUP BY B.TITLE, B.STOCK
ORDER BY B.STOCK ASC, TOTAL_SOLD DESC
LIMIT 1;